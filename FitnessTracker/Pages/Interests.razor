@page "/interests"
@attribute [Authorize]

@using Microsoft.EntityFrameworkCore
@using FitnessTracker.Data
@using Microsoft.AspNetCore.Identity
@inject UserManager<FitnessTrackerUser> UserManager;
@inject AuthenticationStateProvider AuthProvider;
@inject FitnessInterestService FitnessInterestService;

<PageTitle>Interests | FitnessTracker</PageTitle>

<h1>Interests</h1>

<h3>Your interests</h3>
@if (UserInterests == null)
{
    <p>Loading...</p>
}
else if (UserInterests.Count <= 0)
{
    <p>No interests found! Add some below</p>
}
else
{
    <ol>
        @foreach (var interest in UserInterests)
        {
            <li>
                @interest.Type.Name
                @interest.Intensity
            </li>
        }
    </ol>
}

<h3>Search for new interests</h3>
<form @onsubmit="@OnSearch">
    <input @bind="@SearchQuery"/>
</form>

@if (SearchResults == null)
{
    <p>Search for workout types</p>
}
else if (SearchResults.Count <= 0)
{
    <p>No results!</p>
    <button @onclick="@OnSubmit">Submit</button>
}
else
{
    <ol style="text-transform: capitalize">
        @foreach (var result in SearchResults)
        {
            <li>
                @result.Name
                @if (UserInterests != null && !UserInterests.Exists(foo => foo.TypeId == result.Id))
                {
                    <button @onclick="() => AddInterest(result)">Add to your interests</button>
                }
            </li>
        }
    </ol>
}

@code {

    private List<FitnessInterest>? UserInterests { get; set; }

    private string SearchQuery { get; set; } = string.Empty;

    private List<WorkoutType>? SearchResults { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateUserInterests();
    }

    private async Task UpdateUserInterests()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = UserManager.GetUserId(authState.User);

        UserInterests = await FitnessInterestService.GetUserInterests(userId);
    }

    private async void OnSearch()
    {
        if (SearchQuery.Length is <= 0 or > 256)
        {
            SearchResults = null;
            return;
        }

        SearchResults = await FitnessInterestService.SearchForWorkoutType(SearchQuery);
        StateHasChanged();
    }

    private async void OnSubmit()
    {
        await FitnessInterestService.AddWorkoutType(new WorkoutType
        {
            Name = SearchQuery
        });

        OnSearch();
    }

    private async void AddInterest(WorkoutType type)
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = UserManager.GetUserId(authState.User);

        await FitnessInterestService.AddUserInterest(new FitnessInterest
        {
            Intensity = new Random().Next(1, 10),
            TypeId = type.Id!,
            UserId = userId
        });

        await UpdateUserInterests();
        StateHasChanged();
    }

}
