@page "/interests"
@attribute [Authorize]

@using FitnessTracker.Data
@using System.Security.Claims
@inject AuthenticationStateProvider AuthProvider;
@inject FitnessInterestService FitnessInterestService;

<PageTitle>Interests | FitnessTracker</PageTitle>

<h1>Interests</h1>

@if (UserInterests == null)
{
    <p>Loading...</p>
}
else if (!UserInterests.Any())
{
    <p>No interests found! Add some below</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th scope="col">Type</th>
            <th scope="col">Intensity</th>
            <th scope="col">Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var interest in UserInterests)
        {
            <tr>
                <td class="type-display">@interest.Type.Name</td>
                <td>
                    <select @oninput="@((args) => HandleInterestChange(args, interest))" @bind="@interest.Intensity">
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                        <option value="8">8</option>
                        <option value="9">9</option>
                        <option value="10">10</option>
                    </select>
                </td>
                <td>
                    <button type="button" @onclick="@(() => DeleteInterest(interest))">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<form @onsubmit="OnSubmit" class="interests-edit-form" style="display: @(_addNewItem ? "flex" : "none")">
    <WorkoutTypesSelect @bind-WorkoutTypes="_workoutTypes"/>
    <button type="submit" class="btn btn-primary">
        <i class="bi bi-check-lg"></i>
    </button>
</form>

<button type="button" class="btn btn-primary" @onclick="OnEditInterests" style="display: @(_addNewItem ? "none" : "block")">
    <i class="bi bi-pencil-square"></i>
</button>

@code {

    private List<FitnessInterest>? UserInterests { get; set; }

    private List<WorkoutType> _workoutTypes = new();

    private bool _addNewItem = false;

    protected override async Task OnInitializedAsync()
    {
        await UpdateUserInterests();
    }

    private async Task UpdateUserInterests()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)!.Value;

        UserInterests = await FitnessInterestService.GetUserInterests(userId);
    }

    private async void HandleInterestChange(ChangeEventArgs e, FitnessInterest interest)
    {
        var newIntensity = Convert.ToInt32(e.Value!.ToString());
        interest.Intensity = newIntensity;
        await FitnessInterestService.UpdateUserInterest(interest);
        StateHasChanged();
    }

    private void OnEditInterests()
    {
        _addNewItem = true;
        _workoutTypes = UserInterests?.Select(interest => interest.Type).ToList() ?? new List<WorkoutType>();
    }

    private async void OnSubmit()
    {
        if (UserInterests == null)
            return;

        var addedWorkoutTypes = _workoutTypes
            .Where(type => !UserInterests.Any(x => x.Type.Name == type.Name));
        if (addedWorkoutTypes.Any())
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)!.Value;

            await FitnessInterestService.AddUserInterestTypes(userId, addedWorkoutTypes.Where(type => type.Id != null));

            var newWorkoutTypes = addedWorkoutTypes.Where(type => type.Id == null);
            if (newWorkoutTypes.Any())
            {
                newWorkoutTypes = await FitnessInterestService.AddWorkoutTypes(newWorkoutTypes);
                await FitnessInterestService.AddUserInterestTypes(userId, newWorkoutTypes);
            }
        }

        var removedUserInterests = UserInterests
            .Where(interest => !_workoutTypes.Any(x => x.Name == interest.Type.Name));
        if (removedUserInterests.Any())
            await FitnessInterestService.RemoveUserInterests(removedUserInterests);

        _addNewItem = false;
        await UpdateUserInterests();
        StateHasChanged();
    }

    private async void DeleteInterest(FitnessInterest interest)
    {
        await FitnessInterestService.RemoveUserInterest(interest);
        UserInterests?.Remove(interest);
        StateHasChanged();
    }

}
