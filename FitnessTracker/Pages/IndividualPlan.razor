@page "/plans/{id}"
@attribute [Authorize]

<PageTitle>Fitness Plan | FitnessTracker</PageTitle>

@using FitnessTracker.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<FitnessTrackerContext> ContextFactory;

<h1>Fitness Plan</h1>

@if (NotFound)
{
    <PageTitle>Not Found | FitnessTracker</PageTitle>
    <p>Fitness plan not found</p>
}
else if (FitnessPlan == null)
{
    <p>Loading...</p>
}
else
{
    <PageTitle>@FitnessPlan.Title | FitnessTracker</PageTitle>
    <FitnessPlanDisplay FitnessPlan="FitnessPlan"/>
}

@code {

    [Parameter]
    public string? Id { get; set; }

    private bool NotFound { get; set; }

    private FitnessPlan? FitnessPlan { get; set; }

    private async Task LoadFitnessPlan()
    {
        await using var context = await ContextFactory.CreateDbContextAsync();
        var fitnessPlan = await context.FitnessPlans
            .Include(plan => plan.WorkoutItems
                .OrderBy(item => item.Index))
            .FirstOrDefaultAsync(plan => plan.Id == Id);
        if (fitnessPlan == null)
        {
            NotFound = true;
            return;
        }

        FitnessPlan = fitnessPlan;
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadFitnessPlan();
    }

}
