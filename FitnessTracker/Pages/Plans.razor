@page "/plans"
@attribute [Authorize]

@using FitnessTracker.Data
@using Microsoft.AspNetCore.Identity
@inject UserManager<FitnessTrackerUser> UserManager;
@inject AuthenticationStateProvider AuthProvider;
@inject FitnessPlanService FitnessPlanService;
@inject FitnessInterestService FitnessInterestService;

<PageTitle>Fitness Plans | FitnessTracker</PageTitle>

<h1>Fitness Plans</h1>
<Button Color="Color.Primary" Clicked="@ShowModal">Add Fitness Plan</Button>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <EditForm Model="@_submitFitnessPlan" OnSubmit="@HandleSubmit">
            <ModalHeader>
                <ModalTitle>Add Fitness Plan</ModalTitle>
                <CloseButton/>
            </ModalHeader>
            <ModalBody>
                <label for="fitness-plan-title-input" class="form-label">Title</label>
                <InputText placeholder="Title" @bind-Value="_submitFitnessPlan.Title" id="fitness-plan-title-input" class="form-control"/>

                <label for="fitness-plan-date-input" class="form-label">Date</label>
                <InputDate @bind-Value="_submitFitnessPlan.Date" id="fitness-plan-date-input" class="form-control"/>

                <label class="form-label">Workout types</label>
                <WorkoutTypesSelect @bind-WorkoutTypes="_workoutTypes"/>

                <label for="fitness-plan-intensity-input" class="form-label">Intensity</label>
                <InputNumber @bind-Value="_submitFitnessPlan.Intensity" id="fitness-plan-intensity-input" class="form-control"/>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Type="ButtonType.Submit">Save Changes</Button>
            </ModalFooter>
        </EditForm>
    </ModalContent>
</Modal>

@if (FitnessPlans == null)
{
    <p>Loading...</p>
}
else if (FitnessPlans.Count <= 0)
{
    <p>No Fitness plans found!</p>
}
else
{
    @foreach (var fitnessPlan in FitnessPlans)
    {
        <FitnessPlanDisplay FitnessPlan="@fitnessPlan"/>
    }
}

@code {

    private FitnessPlan _submitFitnessPlan = new()
    {
        Date = DateTime.Today
    };

    private List<WorkoutType> _workoutTypes = new();

    private List<FitnessPlan>? FitnessPlans { get; set; }

    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private async void HandleSubmit()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        _submitFitnessPlan.UserId = UserManager.GetUserId(authState.User);

        var fitnessPlan = await FitnessPlanService.AddFitnessPlan(_submitFitnessPlan);
        if (_workoutTypes.Any())
        {
            var newWorkoutTypes = _workoutTypes.Where(type => type.Id == null).ToList();
            _workoutTypes.RemoveAll(type => type.Id == null);
            await FitnessPlanService.AddWorkoutTypeTagsToPlan(fitnessPlan, _workoutTypes);

            if (newWorkoutTypes.Any())
            {
                var addedWorkoutTypes = await FitnessInterestService.AddWorkoutTypes(newWorkoutTypes);
                await FitnessPlanService.AddWorkoutTypeTagsToPlan(fitnessPlan, addedWorkoutTypes);
            }
        }

        _submitFitnessPlan = new FitnessPlan
        {
            Date = DateTime.Today
        };
        _workoutTypes = new List<WorkoutType>();

        await modalRef.Hide();

        await LoadFitnessPlans();
    }

    private async Task LoadFitnessPlans()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = UserManager.GetUserId(authState.User);
        FitnessPlans = await FitnessPlanService.GetUsersFitnessPlans(userId);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFitnessPlans();
    }

}
