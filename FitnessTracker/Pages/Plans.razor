@page "/plans"
@attribute [Authorize]

@using FitnessTracker.Data
@using Microsoft.AspNetCore.Identity
@inject UserManager<FitnessTrackerUser> UserManager;
@inject AuthenticationStateProvider AuthProvider;
@inject FitnessPlanService FitnessPlanService;

<PageTitle>Fitness Plans | FitnessTracker</PageTitle>

<h1>Fitness Plans</h1>

<EditForm Model="@_submitFitnessPlan" OnSubmit="@HandleSubmit">
    <InputText @bind-Value="_submitFitnessPlan.Title"/>
    <InputDate @bind-Value="_submitFitnessPlan.Date"/>
    <InputNumber @bind-Value="_submitFitnessPlan.Intensity"/>
    <button type="submit">Submit</button>
</EditForm>

@if (FitnessPlans == null)
{
    <p>Loading...</p>
}
else if (FitnessPlans.Count <= 0)
{
    <p>No Fitness plans found!</p>
}
else
{
    @foreach (var fitnessPlan in FitnessPlans)
    {
        <FitnessPlanDisplay FitnessPlan="@fitnessPlan"/>
    }
}

@code {

    private FitnessPlan _submitFitnessPlan = new()
    {
        Date = DateTime.Today
    };

    private List<FitnessPlan>? FitnessPlans { get; set; }

    private async void HandleSubmit()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        _submitFitnessPlan.UserId = UserManager.GetUserId(authState.User);

        await FitnessPlanService.AddFitnessPlan(_submitFitnessPlan);
        _submitFitnessPlan = new FitnessPlan
        {
            Date = DateTime.Today
        };

        await LoadFitnessPlans();
    }

    private async Task LoadFitnessPlans()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = UserManager.GetUserId(authState.User);
        FitnessPlans = await FitnessPlanService.GetUsersFitnessPlans(userId);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFitnessPlans();
    }

}
