@using FitnessTracker.Data
@using System.Globalization
@using Humanizer
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<FitnessTrackerUser> UserManager;
@inject AuthenticationStateProvider AuthProvider;
@inject FitnessPlanService FitnessPlanService;

<div class="card">
    <NavLink href=@($"plans/{FitnessPlan.Id}")>
        <h5 class="card-title">@FitnessPlan.Title</h5>
    </NavLink>
    <p>@FitnessPlan.Date.ToString(CultureInfo.CurrentCulture)</p>
    <p>Intensity: @FitnessPlan.Intensity</p>
    <div class="list-group list-group-flush">
        @if (IsOwnPlan)
        {
            <EditForm EditContext="@_editContext">
                @foreach (var item in FitnessPlan.WorkoutItems)
                {
                    <li class="list-group-item" style="display: flex; justify-content: space-between">
                        <div>
                            <b>@item.Title</b>
                            <InputCheckbox @bind-Value="item.IsCompleted"/>
                        </div>
                        <div>
                            @if (FitnessPlan.WorkoutItems.Count > 1 && item != FitnessPlan.WorkoutItems.First())
                            {
                                <button @onclick="() => MoveItem(item, true)">Up</button>
                            }
                            @if (FitnessPlan.WorkoutItems.Count > 1 && item != FitnessPlan.WorkoutItems.Last())
                            {
                                <button @onclick="() => MoveItem(item, false)">Down</button>
                            }
                            <button @onclick="() => DeleteItem(item)">Delete</button>
                        </div>
                    </li>
                }
            </EditForm>
            <li class="list-group-item">
                <EditForm Model="@_newItem" OnSubmit="@HandleItemSubmit">
                    <InputText @bind-Value="@_newItem.Title"/>
                    <InputCheckbox @bind-Value="@_newItem.IsCompleted"/>
                    <button type="submit">Add</button>
                </EditForm>
            </li>
        }
        else
        {
            @foreach (var item in FitnessPlan.WorkoutItems)
            {
                <li class="list-group-item">
                    <b>@item.Title</b>
                    <input type="checkbox" disabled="disabled" checked="@item.IsCompleted"/>
                </li>
            }
        }
    </div>
</div>

@code {

    [Parameter, EditorRequired]
    public FitnessPlan FitnessPlan { get; set; } = null!;

    private EditContext? _editContext;

    private WorkoutItem _newItem = new();

    private bool IsOwnPlan { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = UserManager.GetUserId(authState.User);
        if (FitnessPlan.UserId == userId)
            IsOwnPlan = true;

        _editContext = new EditContext(FitnessPlan);
        _editContext.OnFieldChanged += OnFitnessPlanFieldChanged;
    }

    private async void OnFitnessPlanFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName != "IsCompleted" || e.FieldIdentifier.Model is not WorkoutItem item)
            return;

        await FitnessPlanService.UpdateWorkoutItem(item);
    }

    private async Task HandleItemSubmit()
    {
        await FitnessPlanService.AddWorkoutItemToPlan(FitnessPlan, _newItem);
        _newItem = new WorkoutItem();
        StateHasChanged();
    }

    private async Task MoveItem(WorkoutItem item, bool moveUp)
    {
        await FitnessPlanService.MoveWorkoutItem(FitnessPlan, item, moveUp);
        FitnessPlan.WorkoutItems = FitnessPlan.WorkoutItems.OrderBy(x => x.Index).ToList();
        StateHasChanged();
    }

    private async Task DeleteItem(WorkoutItem item)
    {
        await FitnessPlanService.RemoveWorkoutItem(item);
        FitnessPlan.WorkoutItems.Remove(item);
        StateHasChanged();
    }

}
