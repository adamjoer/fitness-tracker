@using FitnessTracker.Data
@using System.Globalization
@using Humanizer
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<FitnessTrackerUser> UserManager;
@inject AuthenticationStateProvider AuthProvider;
@inject FitnessPlanService FitnessPlanService;
@inject FitnessInterestService FitnessInterestService;

@if (_isOwnPlan)
{
    <Modal @ref="modalRef">
        <ModalContent Centered>
            <EditForm Model="@_editFitnessPlan" OnSubmit="@HandleSubmit">
                <ModalHeader>
                    <ModalTitle>Edit Fitness Plan</ModalTitle>
                    <CloseButton/>
                </ModalHeader>
                <ModalBody>
                    <label for="fitness-plan-title-input" class="form-label">Title</label>
                    <InputText placeholder="Title" @bind-Value="_editFitnessPlan.Title" id="fitness-plan-title-input" class="form-control"/>

                    <label for="fitness-plan-date-input" class="form-label">Date</label>
                    <InputDate @bind-Value="_editFitnessPlan.Date" id="fitness-plan-date-input" class="form-control"/>

                    <label class="form-label">Workout types</label>
                    <WorkoutTypesSelect @bind-WorkoutTypes="_workoutTypes"/>

                    <label for="fitness-plan-intensity-input" class="form-label">Intensity</label>
                    <InputNumber @bind-Value="_editFitnessPlan.Intensity" id="fitness-plan-intensity-input" class="form-control"/>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Primary" Type="ButtonType.Submit">Save Changes</Button>
                </ModalFooter>
            </EditForm>
        </ModalContent>
    </Modal>
}

<div class="card">
    <NavLink href=@($"plans/{FitnessPlan.Id}")>
        <h5 class="card-title">@FitnessPlan.Title</h5>
    </NavLink>
    <p>@FitnessPlan.Date.ToString(CultureInfo.CurrentCulture)</p>
    <p>Intensity: @FitnessPlan.Intensity</p>
    @if (_isOwnPlan)
    {
        <Button Color="Color.Primary" Clicked="@ShowModal">Edit</Button>
    }
    <ul class="list-group list-group-flush">
        @if (_isOwnPlan)
        {
            <EditForm EditContext="@_editContext">
                @foreach (var item in FitnessPlan.WorkoutItems)
                {
                    <li class="list-group-item" style="display: flex; justify-content: space-between">
                        <div>
                            <b>@item.Title</b>
                            <InputCheckbox @bind-Value="item.IsCompleted"/>
                        </div>
                        <div>
                            @if (FitnessPlan.WorkoutItems.Count > 1 && item != FitnessPlan.WorkoutItems.First())
                            {
                                <button @onclick="() => MoveItem(item, true)">Up</button>
                            }
                            @if (FitnessPlan.WorkoutItems.Count > 1 && item != FitnessPlan.WorkoutItems.Last())
                            {
                                <button @onclick="() => MoveItem(item, false)">Down</button>
                            }
                            <button @onclick="() => DeleteItem(item)">Delete</button>
                        </div>
                    </li>
                }
            </EditForm>
            <li class="list-group-item">
                <EditForm Model="@_newItem" OnSubmit="@HandleItemSubmit">
                    <InputText @bind-Value="@_newItem.Title"/>
                    <InputCheckbox @bind-Value="@_newItem.IsCompleted"/>
                    <button type="submit">Add</button>
                </EditForm>
            </li>
        }
        else
        {
            @foreach (var item in FitnessPlan.WorkoutItems)
            {
                <li class="list-group-item">
                    <b>@item.Title</b>
                    <input type="checkbox" disabled="disabled" checked="@item.IsCompleted"/>
                </li>
            }
        }
    </ul>
    @if (FitnessPlan.WorkoutTypeTags.Any())
    {
        <div class="card-footer">
            @foreach (var tag in FitnessPlan.WorkoutTypeTags)
            {
                <span>@tag.Type.Name&nbsp;</span>
            }
        </div>
    }
</div>

@code {

    [Parameter, EditorRequired]
    public FitnessPlan FitnessPlan { get; set; } = null!;

    private EditContext? _editContext;

    private WorkoutItem _newItem = new();

    private bool _isOwnPlan;

    private FitnessPlan _editFitnessPlan = new();

    private List<WorkoutType> _workoutTypes = new();

    private Modal modalRef;

    private Task ShowModal()
    {
        _editFitnessPlan = new FitnessPlan()
        {
            Id = FitnessPlan.Id,
            Date = FitnessPlan.Date,
            Intensity = FitnessPlan.Intensity,
            Title = FitnessPlan.Title,
            UserId = FitnessPlan.UserId,
        };
        _workoutTypes = FitnessPlan.WorkoutTypeTags.Select(tag => tag.Type).ToList();

        return modalRef.Show();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = UserManager.GetUserId(authState.User);
        if (FitnessPlan.UserId == userId)
            _isOwnPlan = true;

        _editContext = new EditContext(FitnessPlan);
        _editContext.OnFieldChanged += OnFitnessPlanFieldChanged;
    }

    private async void OnFitnessPlanFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName != "IsCompleted" || e.FieldIdentifier.Model is not WorkoutItem item)
            return;

        await FitnessPlanService.UpdateWorkoutItem(item);
    }

    private async Task HandleItemSubmit()
    {
        await FitnessPlanService.AddWorkoutItemToPlan(FitnessPlan, _newItem);
        _newItem = new WorkoutItem();
        StateHasChanged();
    }

    private async Task MoveItem(WorkoutItem item, bool moveUp)
    {
        await FitnessPlanService.MoveWorkoutItem(FitnessPlan, item, moveUp);
        FitnessPlan.WorkoutItems = FitnessPlan.WorkoutItems.OrderBy(x => x.Index).ToList();
        StateHasChanged();
    }

    private async Task DeleteItem(WorkoutItem item)
    {
        await FitnessPlanService.RemoveWorkoutItem(item);
        FitnessPlan.WorkoutItems.Remove(item);
        StateHasChanged();
    }

    private async void HandleSubmit()
    {
        var planHasChanged = false;
        if (_editFitnessPlan.Title != FitnessPlan.Title ||
            _editFitnessPlan.Date != FitnessPlan.Date ||
            _editFitnessPlan.Intensity != FitnessPlan.Intensity)
        {
            await FitnessPlanService.UpdateFitnessPlan(_editFitnessPlan);
            planHasChanged = true;
        }

        var addedWorkoutTypes = _workoutTypes
            .Where(type => !FitnessPlan.WorkoutTypeTags.Any(x => x.Type.Name == type.Name));
        if (addedWorkoutTypes.Any())
        {
            await FitnessPlanService.AddWorkoutTypeTagsToPlan(_editFitnessPlan, addedWorkoutTypes.Where(type => type.Id != null));

            var newWorkoutTypes = addedWorkoutTypes.Where(type => type.Id == null);
            if (newWorkoutTypes.Any())
            {
                newWorkoutTypes = await FitnessInterestService.AddWorkoutTypes(newWorkoutTypes);
                await FitnessPlanService.AddWorkoutTypeTagsToPlan(_editFitnessPlan, newWorkoutTypes);
            }
            planHasChanged = true;
        }

        var removedWorkoutTypeTags = FitnessPlan.WorkoutTypeTags
            .Where(tag => !_workoutTypes.Any(x => x.Name == tag.Type.Name));
        if (removedWorkoutTypeTags.Any())
        {
            await FitnessPlanService.RemoveWorkoutTypeTags(removedWorkoutTypeTags);
            planHasChanged = true;
        }

        if (planHasChanged)
        {
            FitnessPlan = (await FitnessPlanService.GetFitnessPlan(FitnessPlan.Id!))!;
            StateHasChanged();
        }

        await modalRef.Hide();
    }

}
