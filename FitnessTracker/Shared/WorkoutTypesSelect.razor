@using FitnessTracker.Data
@using System.Text.RegularExpressions
@inject FitnessInterestService FitnessInterestService;

@*
This is a combination of two implementations of autocomplete and tag input
shamelessly stolen from:
1. https://stackoverflow.com/a/65748719/18713517
2. https://www.mikesdotnetting.com/article/362/simple-autocomplete-for-blazor
*@

<div class="wrapper">
    <div class="types-input form-control">
        @foreach (var type in WorkoutTypes)
        {
            <span class="type">
                @type.Name <span class="type-remove" @onclick="() => DeleteWorkoutType(type)"></span>
            </span>
        }

        <div>
            <input placeholder="Search for workout types" @bind="_searchQuery" @oninput="HandleInput" autocomplete="off"/>
            @if (_searchResults is not null)
            {
                <ul class="search-results">
                    @foreach (var type in _searchResults)
                    {
                        <li class="search-result" @onclick="() => AddWorkoutType(type)">
                            <span class="search-result-text">@type.Name</span>
                        </li>
                    }

                    @if (_canAddNewType)
                    {
                        <li class="search-result add-new-type" @onclick="() => SubmitWorkoutType(_searchQuery)">
                            <span class="search-result-text">Add new workout type <em>@_searchQuery.ToLowerInvariant()</em></span>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

@code {

    [Parameter, EditorRequired]
    public List<WorkoutType> WorkoutTypes { get; set; } = null!;

    [Parameter]
    public EventCallback<List<WorkoutType>> WorkoutTypesChanged { get; set; }

    [Parameter]
    public bool CanAddNewTypes { get; set; } = true;

    private string _searchQuery = string.Empty;

    private List<WorkoutType>? _searchResults;

    private bool _canAddNewType = false;

    async Task HandleInput(ChangeEventArgs e)
    {
        _searchQuery = e.Value?.ToString() ?? string.Empty;
        if (_searchQuery.Any() && Regex.IsMatch(_searchQuery, @"^[a-zA-Z0-9-_]{1,256}$"))
        {
            _searchResults = (await FitnessInterestService.SearchForWorkoutType(_searchQuery))
                .Where(plan => !WorkoutTypes.Exists(x => x.Id == plan.Id))
                .ToList();

            if (CanAddNewTypes)
                _canAddNewType = (_searchResults.Any() && !_searchResults.Exists(x => x.Name.Equals(_searchQuery, StringComparison.InvariantCultureIgnoreCase))) ||
                                 (!_searchResults.Any() && !WorkoutTypes.Exists(x => x.Name.Equals(_searchQuery, StringComparison.InvariantCultureIgnoreCase)));
        }
        else
        {
            _searchResults = null;
            _canAddNewType = false;
        }
    }

    private async Task AddWorkoutType(WorkoutType type)
    {
        _searchResults = null;
        _searchQuery = string.Empty;

        WorkoutTypes.Add(type);
        await WorkoutTypesChanged.InvokeAsync(WorkoutTypes);
    }

    private async Task SubmitWorkoutType(string name)
    {
        await AddWorkoutType(new WorkoutType
        {
            Id = null,
            Name = name.ToLowerInvariant()
        });
    }

    private async Task DeleteWorkoutType(WorkoutType value)
    {
        WorkoutTypes.Remove(value);
        await WorkoutTypesChanged.InvokeAsync(WorkoutTypes);
    }

}
