@using Microsoft.AspNetCore.Identity
@using FitnessTracker.Data
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService;

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="identity/account/manage">
                    <i class="bi bi-person-circle" aria-hidden="true"></i> Hello, @FullName!
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <form method="post" action="identity/account/logout">
                    <button type="submit" class="nav-link" style="width: 100%">
                        <i class="bi bi-box-arrow-left" aria-hidden="true" style="text-align: start"></i> Log out
                    </button>
                </form>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="identity/account/login">
                    <i class="bi bi-box-arrow-in-right" aria-hidden="true"></i> Log in
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="identity/account/register">
                    <i class="bi bi-pencil-square" aria-hidden="true"></i> Register
                </NavLink>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {

    private string FullName { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity is {IsAuthenticated: true })
        {
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)!.Value;
            FullName = await UserService.GetUserFullName(userId) ?? string.Empty;
        }
    }

}
